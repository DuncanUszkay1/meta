module ShopifyCli
  module ScriptModule
    module Infrastructure
      class ConfigurationRepository < Repository
        BASE_DIR_NAME = "configuration"

        def create_configuration(extension_point, script_name)
          schema_source = schema_source(extension_point, script_name)
          root = root(extension_point, script_name)

          FileUtils.mkdir_p(root)
          FileUtils.cp_r(config_template, root)

          type_definitions = generate_types
          types_source = types_source(extension_point, script_name)

          write_config(types_source, type_definitions, extension_point, script_name)

          Domain::Configuration.new(schema_source, File.read(schema_source))
        end

        def generate_configuration_types_from_schema(extension_point_type, script_name)
          extension_point_repo = ExtensionPointRepository.new(ScriptService.new)
          extension_point =
            extension_point_repo.get_extension_point(extension_point_type, script_name)

          configuration = get_configuration(extension_point, script_name)
          type_definitions = GraphQLTypeScriptBuilder.new(configuration.schema).build
          types_source = types_source(extension_point, script_name)

          write_config(types_source, type_definitions, extension_point, script_name)
        end

        def get_configuration(extension_point, script_name)
          root = root(extension_point, script_name)
          schema_source = schema_source(extension_point, script_name)

          unless File.exist?(schema_source)
            raise Domain::ConfigurationNotFoundError.new(script_name, root)
          end

          Domain::Configuration.new(schema_source, File.read(schema_source))
        end

        private

        def write_config(path, contents, extension_point, script_name)
          schema_path = schema_source(extension_point, script_name)

          File.open(path, "w") do |file|
            file.write(
              [
                "/*",
                "This file is automatically derived from #{schema_path}",
                "Do not edit this file directly",
                "To change the types, edit #{schema_path}",
                "and run shopify-cli generate-from-schema #{extension_point.type} #{script_name} --config",
                "*/",
                contents,
              ].join("\n")
            )
          end
        end

        def generate_types(path = config_template)
          schema = File.read(path)
          GraphQLTypeScriptBuilder.new(schema).build
        end

        def schema_source(extension_point, script_name)
          "#{root(extension_point, script_name)}/config.schema"
        end

        def types_source(extension_point, script_name)
          "#{root(extension_point, script_name)}/configuration.ts"
        end

        def root(extension_point, script_name)
          "#{SOURCE_PATH}/#{extension_point.type}/#{script_name}/#{BASE_DIR_NAME}"
        end

        def config_template
          "#{INSTALLATION_BASE_PATH}/templates/configuration/config.schema"
        end
      end
    end
  end
end
